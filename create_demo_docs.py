#!/usr/bin/env python3
"""
Создание демонстрационных документов для тестирования RAG системы
"""

import os
from pathlib import Path
from docx import Document
import json

def create_demo_directory():
    """Создает директорию для демо файлов"""
    demo_dir = Path("demo_documents")
    demo_dir.mkdir(exist_ok=True)
    return demo_dir

def create_machine_learning_doc(demo_dir: Path):
    """Создает документ о машинном обучении"""
    doc = Document()
    doc.add_heading('Введение в Машинное Обучение', 0)
    
    doc.add_heading('Что такое машинное обучение?', level=1)
    doc.add_paragraph(
        'Машинное обучение (Machine Learning, ML) — это подраздел искусственного интеллекта, '
        'который позволяет компьютерам обучаться и принимать решения на основе данных без '
        'явного программирования каждого шага.'
    )
    
    doc.add_heading('Типы машинного обучения', level=1)
    
    doc.add_heading('Обучение с учителем (Supervised Learning)', level=2)
    doc.add_paragraph(
        'В обучении с учителем алгоритм обучается на размеченных данных, где каждый пример '
        'имеет правильный ответ. Примеры задач: классификация изображений, предсказание цен на недвижимость.'
    )
    
    doc.add_heading('Обучение без учителя (Unsupervised Learning)', level=2)
    doc.add_paragraph(
        'Обучение без учителя работает с неразмеченными данными, ищет скрытые структуры и закономерности. '
        'Примеры: кластеризация клиентов, снижение размерности данных.'
    )
    
    doc.add_heading('Обучение с подкреплением (Reinforcement Learning)', level=2)
    doc.add_paragraph(
        'Агент обучается принимать решения в среде, получая награды или наказания за свои действия. '
        'Используется в играх, робототехнике, автономном вождении.'
    )
    
    doc.add_heading('Популярные алгоритмы', level=1)
    doc.add_paragraph('• Линейная регрессия - для предсказания непрерывных значений')
    doc.add_paragraph('• Случайный лес - универсальный алгоритм для классификации и регрессии')
    doc.add_paragraph('• Нейронные сети - для сложных паттернов в данных')
    doc.add_paragraph('• K-means - для кластеризации данных')
    doc.add_paragraph('• SVM - для классификации с максимальным разделением')
    
    doc.add_heading('Применения машинного обучения', level=1)
    doc.add_paragraph(
        'Машинное обучение используется во многих областях: медицине для диагностики заболеваний, '
        'в финансах для обнаружения мошенничества, в маркетинге для персонализации рекламы, '
        'в транспорте для автономного вождения, в развлечениях для рекомендательных систем.'
    )
    
    doc.save(demo_dir / "machine_learning_guide.docx")
    print("Создан файл: machine_learning_guide.docx")

def create_python_programming_doc(demo_dir: Path):
    """Создает документ о программировании на Python"""
    doc = Document()
    doc.add_heading('Руководство по Python', 0)
    
    doc.add_heading('Введение в Python', level=1)
    doc.add_paragraph(
        'Python — это высокоуровневый язык программирования, созданный Гвидо ван Россумом в 1991 году. '
        'Он известен своей простотой, читаемостью кода и большим количеством библиотек.'
    )
    
    doc.add_heading('Основные особенности Python', level=1)
    doc.add_paragraph('• Простой и понятный синтаксис')
    doc.add_paragraph('• Интерпретируемый язык - не требует компиляции')
    doc.add_paragraph('• Объектно-ориентированное программирование')
    doc.add_paragraph('• Богатая стандартная библиотека')
    doc.add_paragraph('• Кроссплатформенность')
    doc.add_paragraph('• Большое сообщество разработчиков')
    
    doc.add_heading('Типы данных в Python', level=1)
    doc.add_paragraph('Основные типы данных в Python:')
    doc.add_paragraph('• int - целые числа (например: 42, -17)')
    doc.add_paragraph('• float - числа с плавающей точкой (например: 3.14, -2.5)')
    doc.add_paragraph('• str - строки (например: "Hello, World!")')
    doc.add_paragraph('• bool - логические значения (True, False)')
    doc.add_paragraph('• list - списки (например: [1, 2, 3, 4])')
    doc.add_paragraph('• dict - словари (например: {"name": "John", "age": 30})')
    
    doc.add_heading('Популярные библиотеки', level=1)
    doc.add_paragraph('• NumPy - для научных вычислений и работы с массивами')
    doc.add_paragraph('• Pandas - для анализа и обработки данных')
    doc.add_paragraph('• Matplotlib - для создания графиков и визуализации')
    doc.add_paragraph('• Django/Flask - для веб-разработки')
    doc.add_paragraph('• TensorFlow/PyTorch - для машинного обучения')
    doc.add_paragraph('• Requests - для HTTP запросов')
    
    doc.add_heading('Области применения', level=1)
    doc.add_paragraph(
        'Python широко используется в веб-разработке, анализе данных, машинном обучении, '
        'автоматизации процессов, научных исследованиях, разработке игр и мобильных приложений.'
    )
    
    doc.save(demo_dir / "python_programming.docx")
    print("Создан файл: python_programming.docx")

def create_ai_ethics_txt(demo_dir: Path):
    """Создает текстовый файл об этике ИИ"""
    content = """Этика искусственного интеллекта

Введение
========

Этика искусственного интеллекта - это область исследований, которая изучает моральные аспекты 
создания и использования систем ИИ. По мере роста влияния ИИ на общество, вопросы этики 
становятся все более важными.

Основные этические принципы ИИ
==============================

1. Справедливость (Fairness)
   - ИИ системы не должны дискриминировать людей по расе, полу, возрасту или другим признакам
   - Алгоритмы должны принимать решения беспристрастно
   - Необходимо учитывать предвзятость в обучающих данных

2. Прозрачность (Transparency)
   - Пользователи должны понимать, как ИИ принимает решения
   - Важна объяснимость алгоритмов
   - Открытость в отношении ограничений и возможностей системы

3. Подотчетность (Accountability)
   - Четкое определение ответственности за решения ИИ
   - Возможность обжалования автоматических решений
   - Контроль со стороны людей над критически важными решениями

4. Конфиденциальность (Privacy)
   - Защита персональных данных пользователей
   - Минимизация сбора и использования данных
   - Согласие пользователей на обработку данных

5. Безопасность (Safety)
   - Предотвращение вреда от использования ИИ
   - Тестирование систем перед внедрением
   - Мониторинг работы ИИ в реальном времени

Проблемы и вызовы
=================

Предвзятость алгоритмов
- ИИ может воспроизводить и усиливать существующие предрассудки
- Важность разнообразного состава команд разработчиков
- Необходимость аудита алгоритмов на предвзятость

Автоматизация рабочих мест
- ИИ может заменить многие профессии
- Необходимость переобучения работников
- Социально-экономические последствия автоматизации

Автономные системы
- Этические дилеммы в автономном транспорте
- Военное применение ИИ
- Ответственность за действия автономных систем

Манипулирование и дезинформация
- Использование ИИ для создания фейковых новостей
- Манипулирование общественным мнением
- Deepfake технологии

Рекомендации для разработчиков
==============================

1. Включать этические соображения на всех этапах разработки
2. Проводить аудит алгоритмов на предвзятость
3. Обеспечивать прозрачность и объяснимость решений
4. Защищать конфиденциальность пользователей
5. Тестировать системы в реальных условиях
6. Обучать команду принципам этики ИИ
7. Сотрудничать с этиками и социологами

Заключение
==========

Этика ИИ - это не ограничение для инноваций, а руководство для создания технологий, 
которые приносят пользу всему обществу. Ответственная разработка ИИ требует 
постоянного внимания к этическим вопросам и готовности адаптироваться к новым вызовам.
"""
    
    with open(demo_dir / "ai_ethics.txt", 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("Создан файл: ai_ethics.txt")

def create_data_science_txt(demo_dir: Path):
    """Создает текстовый файл о данных и аналитике"""
    content = """Наука о данных: Полное руководство

Что такое Data Science?
=======================

Data Science (наука о данных) - это междисциплинарная область, которая использует 
научные методы, процессы, алгоритмы и системы для извлечения знаний и идей из 
структурированных и неструктурированных данных.

Основные компоненты Data Science
================================

1. Статистика и математика
   - Описательная статистика
   - Проверка гипотез
   - Регрессионный анализ
   - Теория вероятностей

2. Программирование
   - Python, R, SQL
   - Работа с библиотеками для анализа данных
   - Создание скриптов для автоматизации

3. Знание предметной области
   - Понимание бизнес-процессов
   - Контекст для интерпретации результатов
   - Постановка правильных вопросов

4. Машинное обучение
   - Алгоритмы обучения с учителем и без учителя
   - Глубокое обучение
   - Обработка естественного языка

Жизненный цикл проекта Data Science
===================================

1. Постановка проблемы
   - Определение целей и задач
   - Формулирование гипотез
   - Выбор метрик успеха

2. Сбор и подготовка данных
   - Идентификация источников данных
   - Сбор и агрегация данных
   - Очистка и предобработка

3. Исследовательский анализ данных (EDA)
   - Изучение структуры данных
   - Поиск аномалий и выбросов
   - Визуализация данных

4. Моделирование
   - Выбор подходящих алгоритмов
   - Обучение и валидация моделей
   - Настройка гиперпараметров

5. Оценка и интерпретация
   - Тестирование модели на новых данных
   - Анализ результатов
   - Интерпретация выводов

6. Внедрение и мониторинг
   - Развертывание решения в продакшене
   - Мониторинг производительности
   - Обновление модели при необходимости

Инструменты и технологии
========================

Языки программирования:
- Python: pandas, NumPy, scikit-learn, matplotlib
- R: ggplot2, dplyr, caret, shiny
- SQL: для работы с базами данных

Среды разработки:
- Jupyter Notebook
- RStudio
- Google Colab
- Databricks

Визуализация данных:
- Tableau
- Power BI
- Plotly
- D3.js

Большие данные:
- Apache Spark
- Hadoop
- Apache Kafka
- Elasticsearch

Облачные платформы:
- AWS (SageMaker, S3, Redshift)
- Google Cloud Platform (BigQuery, AI Platform)
- Microsoft Azure (Machine Learning, Data Factory)

Карьерные пути в Data Science
=============================

1. Data Analyst
   - Анализ данных и создание отчетов
   - Визуализация данных
   - Поддержка принятия решений

2. Data Scientist
   - Создание прогнозных моделей
   - Исследование данных
   - Разработка алгоритмов

3. Machine Learning Engineer
   - Внедрение ML моделей в продакшен
   - Оптимизация производительности
   - MLOps и автоматизация

4. Data Engineer
   - Построение data pipeline
   - Работа с большими данными
   - Инфраструктура для данных

Практические советы
==================

1. Начните с основ статистики и программирования
2. Работайте с реальными проектами и данными
3. Изучайте различные алгоритмы машинного обучения
4. Развивайте навыки визуализации данных
5. Понимайте бизнес-контекст ваших проектов
6. Участвуйте в соревнованиях Kaggle
7. Создавайте портфолио проектов
8. Следите за новыми трендами в области

Будущее Data Science
====================

- Автоматизированное машинное обучение (AutoML)
- Федеративное обучение
- Объяснимый ИИ (Explainable AI)
- Этичная и ответственная аналитика
- Интеграция с IoT и edge computing
- Квантовое машинное обучение

Data Science продолжает эволюционировать, предлагая захватывающие возможности 
для решения сложных проблем и создания ценности из данных.
"""
    
    with open(demo_dir / "data_science_guide.txt", 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("Создан файл: data_science_guide.txt")

def create_config_json(demo_dir: Path):
    """Создает конфигурационный файл с информацией о демо файлах"""
    config = {
        "demo_documents": {
            "machine_learning_guide.docx": {
                "title": "Введение в Машинное Обучение",
                "type": "educational",
                "topics": ["машинное обучение", "алгоритмы", "ИИ", "классификация", "регрессия"],
                "language": "ru"
            },
            "python_programming.docx": {
                "title": "Руководство по Python",
                "type": "programming",
                "topics": ["python", "программирование", "типы данных", "библиотеки"],
                "language": "ru"
            },
            "ai_ethics.txt": {
                "title": "Этика искусственного интеллекта",
                "type": "ethics",
                "topics": ["этика", "ИИ", "справедливость", "прозрачность", "безопасность"],
                "language": "ru"
            },
            "data_science_guide.txt": {
                "title": "Наука о данных: Полное руководство",
                "type": "educational",
                "topics": ["data science", "аналитика", "статистика", "машинное обучение"],
                "language": "ru"
            }
        },
        "created_at": "2025",
        "description": "Демонстрационные документы для тестирования RAG системы"
    }
    
    with open(demo_dir / "demo_config.json", 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=2, ensure_ascii=False)
    
    print("Создан файл: demo_config.json")

def main():
    """Создает все демонстрационные файлы"""
    print("Создание демонстрационных документов для RAG системы...")
    print("=" * 60)
    
    # Создаем директорию
    demo_dir = create_demo_directory()
    print(f"Создана директория: {demo_dir}")
    
    # Создаем документы
    try:
        create_machine_learning_doc(demo_dir)
        create_python_programming_doc(demo_dir)
        create_ai_ethics_txt(demo_dir)
        create_data_science_txt(demo_dir)
        create_config_json(demo_dir)
        
        print("\n" + "=" * 60)
        print("Все демонстрационные файлы созданы успешно!")
        print(f"Файлы сохранены в директории: {demo_dir.absolute()}")
        print("\nДля тестирования RAG системы используйте:")
        print(f"python rag_chatbot.py --documents {demo_dir}/*.docx {demo_dir}/*.txt --interactive")
        
    except ImportError as e:
        if "docx" in str(e):
            print("Ошибка: не установлена библиотека python-docx")
            print("Установите: pip install python-docx")
        elif "fpdf" in str(e):
            print("Ошибка: не установлена библиотека fpdf2") 
            print("Установите: pip install fpdf2")
        else:
            print(f"Ошибка импорта: {e}")
    
    except Exception as e:
        print(f"Ошибка при создании файлов: {e}")

if __name__ == "__main__":
    main()