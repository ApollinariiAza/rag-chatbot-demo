#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RAG Chatbot –ø—Ä–æ–µ–∫—Ç–∞
"""

import subprocess
import sys
import os
from pathlib import Path
import urllib.request
import zipfile
import tempfile

def install_requirements():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    basic_requirements = [
        "torch",
        "sentence-transformers",
        "faiss-cpu",
        "nltk",
        "numpy",
        "pandas",
        "python-dotenv",
        "httpx",
        "PyPDF2",
        "python-docx",
        "python-pptx"
    ]
    
    for requirement in basic_requirements:
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", requirement])
            print(f"  {requirement}")
        except subprocess.CalledProcessError:
            print(f"  –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {requirement}")
            return False
    
    return True

def install_optional_requirements():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("\n–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    optional_requirements = [
        "langchain",
        "langchain-community", 
        "langchain-text-splitters",
        "streamlit",
        "gradio",
        "pytest",
        "pytest-asyncio"
    ]
    
    for requirement in optional_requirements:
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", requirement])
            print(f"  {requirement}")
        except subprocess.CalledProcessError:
            print(f"  –ü—Ä–æ–ø—É—â–µ–Ω {requirement} (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)")

def setup_nltk_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ NLTK"""
    print("\n–ù–∞—Å—Ç—Ä–æ–π–∫–∞ NLTK...")
    
    try:
        import nltk
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ—Ä–ø—É—Å–∞
        datasets = ['punkt', 'stopwords', 'wordnet']
        
        for dataset in datasets:
            try:
                nltk.download(dataset, quiet=True)
                print(f"  {dataset}")
            except:
                print(f"  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {dataset}")
        
        return True
    except ImportError:
        print("  NLTK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def create_directories():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    print("\n–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    directories = [
        'documents',
        'knowledge_bases', 
        'exports',
        'demo_documents',
        'logs'
    ]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"  {directory}/")

def setup_env_file():
    """–°–æ–∑–¥–∞–µ—Ç .env —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    if not os.path.exists('.env'):
        print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞...")
        
        env_content = """# API Keys for LLM services
MISTRAL_API_KEY=your_mistral_api_key_here
GEMINI_API_KEY=your_gemini_api_key_here
OPENAI_API_KEY=your_openai_api_key_here

# Local LLM endpoint (if using local models)
LOCAL_LLM_URL=http://localhost:8000

# Embedding model settings
DEFAULT_EMBEDDING_MODEL=all-MiniLM-L6-v2
EMBEDDING_DEVICE=cpu

# Text processing settings
DEFAULT_CHUNK_SIZE=500
DEFAULT_CHUNK_OVERLAP=50
MAX_CONTEXT_DOCUMENTS=5

# Web interface settings
STREAMLIT_SERVER_PORT=8501
GRADIO_PORT=7860
"""
        
        with open('.env', 'w') as f:
            f.write(env_content)
        
        print("  .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")
        print("  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à–∏ API –∫–ª—é—á–∏!")
    else:
        print("\n.env —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def test_installation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    
    tests = [
        ("sentence_transformers", "SentenceTransformers"),
        ("faiss", "FAISS"),
        ("nltk", "NLTK"),
        ("PyPDF2", "PyPDF2"),
        ("docx", "python-docx"),
        ("pptx", "python-pptx")
    ]
    
    all_passed = True
    
    for module, name in tests:
        try:
            __import__(module)
            print(f"  {name}")
        except ImportError:
            print(f"  {name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            all_passed = False
    
    # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    try:
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
        from sentence_transformers import SentenceTransformer
        
        model = SentenceTransformer('all-MiniLM-L6-v2')
        test_embedding = model.encode(["–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"])
        
        print(f"  –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞, —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {len(test_embedding[0])}")
        
    except Exception as e:
        print(f"  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        all_passed = False
    
    # –¢–µ—Å—Ç FAISS
    try:
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FAISS...")
        import faiss
        import numpy as np
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∏–Ω–¥–µ–∫—Å
        dimension = 384
        index = faiss.IndexFlatIP(dimension)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–µ–∫—Ç–æ—Ä—ã
        test_vectors = np.random.random((5, dimension)).astype('float32')
        index.add(test_vectors)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        scores, indices = index.search(test_vectors[:1], k=3)
        
        print(f"  FAISS —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ {len(indices[0])} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
    except Exception as e:
        print(f"  –û—à–∏–±–∫–∞ FAISS: {e}")
        all_passed = False
    
    return all_passed

def create_demo_launcher():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ"""
    print("\n–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ...")
    
    launcher_content = '''#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ RAG Chatbot Demo
"""

import subprocess
import sys
import os
from pathlib import Path

def main():
    print("RAG Chatbot Demo Launcher")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    required_files = ['rag_chatbot.py', 'create_demo_docs.py']
    missing_files = [f for f in required_files if not Path(f).exists()]
    
    if missing_files:
        print(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return
    
    while True:
        print("\\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞:")
        print("1. –°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–¥–æ–∫—É–º–µ–Ω—Ç—ã")
        print("2. –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π)")
        print("3. –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (Streamlit)")
        print("4. –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (Gradio)")
        print("5. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã")
        print("0. –í—ã—Ö–æ–¥")
        
        choice = input("\\n–í–∞—à –≤—ã–±–æ—Ä: ").strip()
        
        if choice == "0":
            break
        elif choice == "1":
            subprocess.run([sys.executable, "create_demo_docs.py"])
        elif choice == "2":
            if Path("demo_documents").exists():
                subprocess.run([
                    sys.executable, "rag_chatbot.py", 
                    "--documents", "demo_documents/*", 
                    "--interactive"
                ])
            else:
                print("–°–æ–∑–¥–∞–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –¥–µ–º–æ-–¥–æ–∫—É–º–µ–Ω—Ç—ã (–æ–ø—Ü–∏—è 1)")
        elif choice == "3":
            try:
                subprocess.run([sys.executable, "-m", "streamlit", "run", "web_interface.py"])
            except FileNotFoundError:
                print("Streamlit –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        elif choice == "4":
            try:
                subprocess.run([sys.executable, "gradio_interface.py"])
            except FileNotFoundError:
                print("gradio_interface.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        elif choice == "5":
            try:
                subprocess.run([sys.executable, "test_rag.py", "--manual"])
            except FileNotFoundError:
                print("test_rag.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main()
'''
    
    with open('launch_demo.py', 'w') as f:
        f.write(launcher_content)
    
    # –î–µ–ª–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º (–Ω–∞ Unix —Å–∏—Å—Ç–µ–º–∞—Ö)
    try:
        os.chmod('launch_demo.py', 0o755)
    except:
        pass
    
    print("  –°–æ–∑–¥–∞–Ω launch_demo.py")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ RAG Chatbot Demo")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏
    if sys.version_info < (3, 8):
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –Ω–æ–≤–µ–µ")
        return False
    
    print(f"Python {sys.version_info.major}.{sys.version_info.minor}")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not install_requirements():
        print("\n–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        return False
    
    install_optional_requirements()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ NLTK
    setup_nltk_data()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    create_directories()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    setup_env_file()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞
    create_demo_launcher()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if test_installation():
        print("\n" + "=" * 50)
        print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –î–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python launch_demo.py")
        print("3. –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –¥–µ–º–æ: python create_demo_docs.py")
        print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —á–∞—Ç: python rag_chatbot.py --documents demo_documents/* --interactive")
        print("\n–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:")
        print("‚Ä¢ Streamlit: streamlit run web_interface.py")
        print("‚Ä¢ Gradio: python gradio_interface.py")
        return True
    else:
        print("\n–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å –æ—à–∏–±–∫–∞–º–∏")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ –≤—ã—à–µ –∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)