import streamlit as st
import asyncio
import os
from pathlib import Path
import tempfile
import time

from main import RAGChatbot, DocumentProcessor
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="RAG Chatbot Demo",
    page_icon="ü§ñ",
    layout="wide"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@st.cache_resource
def init_chatbot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–±–æ—Ç–∞ (–∫—ç—à–∏—Ä—É–µ—Ç—Å—è)"""
    return RAGChatbot(
        embedding_model=st.session_state.get('embedding_model', 'all-MiniLM-L6-v2'),
        llm_provider=st.session_state.get('llm_provider', 'mistral'),
        llm_model=st.session_state.get('llm_model', 'mistral-small'),
        chunk_size=st.session_state.get('chunk_size', 500)
    )

def save_uploaded_file(uploaded_file):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
    with tempfile.NamedTemporaryFile(delete=False, suffix=Path(uploaded_file.name).suffix) as tmp_file:
        tmp_file.write(uploaded_file.getvalue())
        return tmp_file.name

async def process_query(chatbot, query):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return await chatbot.ask(query)

def main():
    st.title("ü§ñ RAG Chatbot Demo")
    st.markdown("*Retrieval-Augmented Generation —á–∞—Ç–±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤*")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
        embedding_model = st.selectbox(
            "–ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:",
            ["all-MiniLM-L6-v2", "all-mpnet-base-v2", "paraphrase-MiniLM-L6-v2"],
            index=0
        )
        
        llm_provider = st.selectbox(
            "–ü—Ä–æ–≤–∞–π–¥–µ—Ä LLM:",
            ["mistral", "local"],
            index=0
        )
        
        llm_model = st.text_input(
            "–ú–æ–¥–µ–ª—å LLM:",
            value="mistral-small"
        )
        
        chunk_size = st.slider(
            "–†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞:",
            min_value=200,
            max_value=1000,
            value=500,
            step=50
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ session state
        st.session_state.embedding_model = embedding_model
        st.session_state.llm_provider = llm_provider
        st.session_state.llm_model = llm_model
        st.session_state.chunk_size = chunk_size
        
        st.divider()
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
        st.header("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        kb_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π (.pkl):",
            type=['pkl'],
            key="kb_upload"
        )
        
        if kb_file and st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"):
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ
                with tempfile.NamedTemporaryFile(delete=False, suffix='.pkl') as tmp_file:
                    tmp_file.write(kb_file.getvalue())
                    kb_path = tmp_file.name[:-4]  # –£–±–∏—Ä–∞–µ–º .pkl –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ load
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ —á–∞—Ç–±–æ—Ç
                chatbot = init_chatbot()
                chatbot.load_knowledge_base(kb_path)
                st.success("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
                os.unlink(tmp_file.name)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"):
            try:
                chatbot = init_chatbot()
                kb_path = "knowledge_base"
                chatbot.save_knowledge_base(kb_path)
                
                # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                with open(f"{kb_path}.pkl", "rb") as f:
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å .pkl —Ñ–∞–π–ª",
                        data=f.read(),
                        file_name="knowledge_base.pkl",
                        mime="application/octet-stream"
                    )
                
                st.success("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.header("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
        uploaded_files = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π:",
            type=['pdf', 'docx', 'doc', 'pptx', 'ppt', 'txt', 'md'],
            accept_multiple_files=True
        )
        
        if uploaded_files and st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã"):
            chatbot = init_chatbot()
            
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            temp_files = []
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                for i, uploaded_file in enumerate(uploaded_files):
                    status_text.text(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ {i+1}/{len(uploaded_files)}: {uploaded_file.name}")
                    temp_file_path = save_uploaded_file(uploaded_file)
                    temp_files.append(temp_file_path)
                    progress_bar.progress((i + 1) * 0.3 / len(uploaded_files))
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
                status_text.text("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
                num_chunks = chatbot.load_documents(temp_files)
                progress_bar.progress(1.0)
                
                status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–∑–¥–∞–Ω–æ {num_chunks} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤.")
                st.success(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(uploaded_files)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–æ {num_chunks} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤!")
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
            
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                for temp_file in temp_files:
                    try:
                        os.unlink(temp_file)
                    except:
                        pass
        
        st.divider()
        
        # –ß–∞—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        st.header("üí¨ –ß–∞—Ç —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏")
        
        # –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
        if 'chat_history' not in st.session_state:
            st.session_state.chat_history = []
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        for message in st.session_state.chat_history:
            with st.chat_message(message["role"]):
                st.write(message["content"])
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞
                if message["role"] == "assistant" and "sources" in message:
                    if message["sources"]:
                        with st.expander("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"):
                            for i, source in enumerate(message["sources"], 1):
                                st.write(f"**{i}. {Path(source['source']).name}** (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {source['score']:.3f})")
                                st.write(source['content'])
                                st.divider()
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if user_query := st.chat_input("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º..."):
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            st.session_state.chat_history.append({
                "role": "user", 
                "content": user_query
            })
            
            with st.chat_message("user"):
                st.write(user_query)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —á–∞—Ç–±–æ—Ç–∞
            with st.chat_message("assistant"):
                with st.spinner("–î—É–º–∞—é..."):
                    try:
                        chatbot = init_chatbot()
                        
                        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
                        loop = asyncio.new_event_loop()
                        asyncio.set_event_loop(loop)
                        response = loop.run_until_complete(process_query(chatbot, user_query))
                        loop.close()
                        
                        st.write(response['answer'])
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                        st.session_state.chat_history.append({
                            "role": "assistant",
                            "content": response['answer'],
                            "sources": response['sources']
                        })
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                        if response['sources']:
                            with st.expander("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"):
                                for i, source in enumerate(response['sources'], 1):
                                    st.write(f"**{i}. {Path(source['source']).name}** (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {source['score']:.3f})")
                                    st.write(source['content'])
                                    st.divider()
                    
                    except Exception as e:
                        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}"
                        st.error(error_msg)
                        
                        st.session_state.chat_history.append({
                            "role": "assistant",
                            "content": error_msg,
                            "sources": []
                        })
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        if st.button("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"):
            st.session_state.chat_history = []
            st.rerun()
    
    with col2:
        st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        try:
            chatbot = init_chatbot()
            num_docs = len(chatbot.vector_store.documents)
            
            st.metric("–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ", num_docs)
            
            if num_docs > 0:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
                st.subheader("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:")
                
                sources = set()
                for metadata in chatbot.vector_store.metadata:
                    if 'source' in metadata:
                        sources.add(Path(metadata['source']).name)
                
                for source in sorted(sources):
                    st.write(f"‚Ä¢ {source}")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
                file_types = {}
                for metadata in chatbot.vector_store.metadata:
                    if 'file_type' in metadata:
                        file_type = metadata['file_type']
                        file_types[file_type] = file_types.get(file_type, 0) + 1
                
                if file_types:
                    st.subheader("–¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤:")
                    for file_type, count in file_types.items():
                        st.write(f"‚Ä¢ {file_type}: {count} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤")
        
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        st.divider()
        
        st.header("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        st.write("**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**")
        st.write("‚Ä¢ PDF (.pdf)")
        st.write("‚Ä¢ Word (.docx, .doc)")
        st.write("‚Ä¢ PowerPoint (.pptx, .ppt)")
        st.write("‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt, .md)")
        
        st.write("**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**")
        st.write("1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        st.write("2. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        st.write("3. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —á–∞—Ç–µ")
        
        st.write("**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**")
        st.write("‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏")
        st.write("‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ/–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")

if __name__ == "__main__":
    main()